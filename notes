see http://networkx.readthedocs.org/en/stable/reference/classes.digraph.html
for add path function
idea is to add a path (edges between nodes) from a long list (eg, ASpath) rather than one edge at a time

to add a path of edges (and create the nodes if they don't already exist in the graph):
DG.add_path([11039, 174, 3356, 13546])

To add paths with an attribute:
DG.add_path([11039, 174, 3356, 13546],localpref=100)

which results in:
>>> DG.edges(data=True)
[(3356, 13546, {'localpref': 100}), (174, 3356, {'localpref': 100}), (11039, 174, {'localpref': 100})]

This may be a bit misleading for LocalPref since we have no idea what the localpref is outside our AS
(maybe have a different(lighter) color for paths beyond the first hop?)



using networkx
also using graphviz and pydot
pydot relies on graphviz and pyparsing

trouble importing pydot, try using pip install pydot2

not sure if this work can do without networkx and use graphviz/dot directly

write current networkx graph as a graphviz file:
nx.write_dot(DG, '/home/agallo/tmp/first.dot')


to set a node attribute after the node is created:
nx.set_node_attributes(DG, 'ASname', {11039:'GW'})
             graph-----^      ^           ^
           attribute name-----|           |
    dictionary of node names to values----|

these attributes will be converted to node (and edge?) attributes when converted to dot format
eg:
nx.set_node_attributes(DG, 'style', {11039:'filled'})
nx.set_node_attributes(DG, 'color', {11039:'blue'})

line from dot file:
11039 [color=blue, style=filled, ASname=GW];



to add attributes to an existing edge:
the format is GRAPH[node1][node2]['attributename'] = value
DG[11039][174]['LocalPref'] = 100

the result is:
>>> DG[11039][174]
{'LocalPref': 100}

>>> DG[11039][174]['color']='blue'
>>> DG[11039][174]
{'color': 'blue', 'LocalPref': 100}


These attributes will be carried through to the dot file when converted with the above command
